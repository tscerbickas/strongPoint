// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.WebApi.DataAccess;

#nullable disable

namespace Project.WebApi.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220210172333_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("Project.WebApi.DataAccess.Entities.CalculationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImpactResultId")
                        .HasColumnType("TEXT");

                    b.Property<double>("KineticEnergy")
                        .HasPrecision(18, 9)
                        .HasColumnType("REAL");

                    b.Property<double>("Mass")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<double>("Velicoty")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ImpactResultId");

                    b.ToTable("CalculationHistory");
                });

            modelBuilder.Entity("Project.WebApi.DataAccess.Entities.KineticImpactResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("KineticEnergity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("KineticImpatResults");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13546dc7-fd57-4ab0-a6a7-0b42f69e87da"),
                            Description = "Will not cause any harm.",
                            KineticEnergity = 0,
                            ModifiedDate = new DateTime(2022, 2, 10, 19, 23, 33, 811, DateTimeKind.Local).AddTicks(4014)
                        },
                        new
                        {
                            Id = new Guid("c52ec09b-688f-4557-aef1-605e29b39f5e"),
                            Description = "Will break the windows.",
                            KineticEnergity = 1000,
                            ModifiedDate = new DateTime(2022, 2, 10, 19, 23, 33, 811, DateTimeKind.Local).AddTicks(4055)
                        },
                        new
                        {
                            Id = new Guid("9fdc51a7-debf-481d-b0f7-b2bca1f2c3fa"),
                            Description = "Will destroy small city.",
                            KineticEnergity = 10000,
                            ModifiedDate = new DateTime(2022, 2, 10, 19, 23, 33, 811, DateTimeKind.Local).AddTicks(4058)
                        },
                        new
                        {
                            Id = new Guid("b6e271e9-54d0-46c8-825e-fef8fb8415e5"),
                            Description = "Will destroy a nation.",
                            KineticEnergity = 1000000,
                            ModifiedDate = new DateTime(2022, 2, 10, 19, 23, 33, 811, DateTimeKind.Local).AddTicks(4061)
                        },
                        new
                        {
                            Id = new Guid("9ea9fbad-ba59-4e3c-b8b2-658613e05738"),
                            Description = "Will destroy a whole word.",
                            KineticEnergity = 10000000,
                            ModifiedDate = new DateTime(2022, 2, 10, 19, 23, 33, 811, DateTimeKind.Local).AddTicks(4063)
                        });
                });

            modelBuilder.Entity("Project.WebApi.DataAccess.Entities.CalculationHistory", b =>
                {
                    b.HasOne("Project.WebApi.DataAccess.Entities.KineticImpactResult", "ImpactResult")
                        .WithMany()
                        .HasForeignKey("ImpactResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImpactResult");
                });
#pragma warning restore 612, 618
        }
    }
}
